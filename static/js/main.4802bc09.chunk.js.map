{"version":3,"sources":["dust.js","App.js","reportWebVitals.js","index.js"],"names":["dust","Math","floor","random","App","useState","value","setValue","speak","useSpeechSynthesis","useSpeechRecognition","onResult","result","listen","listening","stop","stopit","text","document","querySelector","click","navigator","mediaDevices","enumerateDevices","then","devices","cameras","filter","device","kind","length","camera","getUserMedia","video","deviceId","facingMode","height","ideal","width","stream","track","getVideoTracks","ImageCapture","getPhotoCapabilities","btn","btn2","addEventListener","applyConstraints","advanced","torch","class","onMouseDown","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oNAAO,SAASA,IACZ,OAAOC,KAAKC,MAAM,EAAAD,KAAKE,UAAwB,G,WCyHpCC,MAlHf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAELC,EAAUC,+BAAVD,MAFK,EAGuBE,+BAAqB,CACvDC,SAAU,SAACC,GAETL,EAASK,MAHLC,EAHK,EAGLA,OAAQC,EAHH,EAGGA,UAAWC,EAHd,EAGcA,KAuE7B,SAASC,IACPD,IACY,wBAATT,GACDE,EAAM,CAACS,KAAO,0CAXJC,SAASC,cAAc,WAC/BC,SAca,wBAATd,GACNE,EAAM,CAACS,KAAO,0CAZJC,SAASC,cAAc,eAC/BC,UAca,sDAATd,GAGS,uDAATA,IAFNE,EAAM,CAACS,KAAOjB,IAAS,mDASzB,MAnF6B,iBAAkBqB,WAI/CA,UAAUC,aAAaC,mBAAmBC,MAAK,SAAAC,GAE7C,IAAMC,EAAUD,EAAQE,QAAO,SAACC,GAAD,MAA4B,eAAhBA,EAAOC,QAElD,GAAuB,IAAnBH,EAAQI,OACV,KAAM,kCAER,IAAMC,EAASL,EAAQA,EAAQI,OAAS,GAGxCT,UAAUC,aAAaU,aAAa,CAClCC,MAAO,CACLC,SAAUH,EAAOG,SACjBC,WAAY,CAAC,OAAQ,eACrBC,OAAQ,CAACC,MAAO,MAChBC,MAAO,CAACD,MAAO,SAEhBb,MAAK,SAAAe,GACN,IAAMC,EAAQD,EAAOE,iBAAiB,GAGjB,IAAIC,aAAaF,GACCG,uBAAuBnB,MAAK,WAKjE,IAAMoB,EAAM1B,SAASC,cAAc,WAC7B0B,EAAO3B,SAASC,cAAc,eACpCyB,EAAIE,iBAAiB,SAAS,WAC5BN,EAAMO,iBAAiB,CACrBC,SAAU,CAAC,CAACC,OAAO,SAGvBJ,EAAKC,iBAAiB,SAAS,WAC7BN,EAAMO,iBAAiB,CACrBC,SAAU,CAAC,CAACC,OAAO,kBA6C3B,gCACE,qKACA,sBAAKC,MAAM,UAAX,UACA,qBAAKA,MAAM,KAAX,SACA,wBAAQA,MAAM,KAAKC,YAAatC,EAAhC,yCAEA,qBAAKqC,MAAM,KAAX,SACA,wBAAQA,MAAM,KAAMC,YAAa,WAAOnC,KAAxC,4CAGA,wBAAQkC,MAAM,YAAd,sBACA,wBAAQA,MAAM,gBAAd,iBACA,8BAAM5C,IACLQ,GAAa,yFC1GLsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5C,SAAS6C,eAAe,SAM1BX,M","file":"static/js/main.4802bc09.chunk.js","sourcesContent":["export function dust(){\n    return Math.floor(Math.random() * (51 - 42)) + 42;\n} \n\n","import React, { useState } from 'react';\nimport { useSpeechRecognition } from 'react-speech-kit';\nimport { useSpeechSynthesis } from 'react-speech-kit';\nimport './App.css';\nimport {dust} from './dust';\n\n\n\nfunction App() {\n  const [value, setValue] = useState('');\n  const { speak } = useSpeechSynthesis();\n  const { listen, listening, stop } = useSpeechRecognition({\n    onResult: (result) => {\n      // 음성인식 결과가 value 상태값으로 할당됩니다.\n      setValue(result);\n    }\n  });\n\n\n//Test browser support\nconst SUPPORTS_MEDIA_DEVICES = 'mediaDevices' in navigator;\n\nif (SUPPORTS_MEDIA_DEVICES) {\n  //Get the environment camera (usually the second one)\n  navigator.mediaDevices.enumerateDevices().then(devices => {\n  \n    const cameras = devices.filter((device) => device.kind === 'videoinput');\n\n    if (cameras.length === 0) {\n      throw 'No camera found on this device.';\n    }\n    const camera = cameras[cameras.length - 1];\n\n    // Create stream and get video track\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: camera.deviceId,\n        facingMode: ['user', 'environment'],\n        height: {ideal: 1080},\n        width: {ideal: 1920}\n      }\n    }).then(stream => {\n      const track = stream.getVideoTracks()[0];\n\n      //Create image capture object and get camera capabilities\n      const imageCapture = new ImageCapture(track)\n      const photoCapabilities = imageCapture.getPhotoCapabilities().then(() => {\n\n        //todo: check if camera has a torch\n\n        //let there be light!\n        const btn = document.querySelector('.switch');\n        const btn2 = document.querySelector('.switch_off');\n        btn.addEventListener('click', function(){\n          track.applyConstraints({\n            advanced: [{torch: true}]\n          });\n        });\n        btn2.addEventListener('click', function(){\n          track.applyConstraints({\n            advanced: [{torch: false}]\n          });\n        });\n      });\n    });\n  });\n\n  \n  //The light will be on as long the track exists\n  \n  \n}\n\nfunction on(){\n  const btn = document.querySelector('.switch');\n  btn.click();\n} \nfunction off(){\n  const btn = document.querySelector('.switch_off');\n  btn.click();\n} \n\nfunction stopit(){\n  stop();\n  if(value == \"불 켜 줘\"){\n    speak({text : \"네 알겠습니다\"})\n    on();\n    \n  }\n  else if(value == \"불 꺼 줘\"){\n    speak({text : \"네 알겠습니다\"})\n    off();\n  }\n  else if(value == \"현재 미세먼지 어때\"){\n    speak({text : dust() + \" 으로, 좋음 입니다\"})\n  }\n  else if(value == \"현재 미세 먼지 어때\"){\n    speak({text : dust() + \" 으로, 좋음 입니다\"})\n  }\n  \n\n}\n  \n  return (\n    \n    <div>\n      <h3>3103 김명준 작품명: 미세먼지 알려주는 스마트 스탠드</h3>\n      <div class=\"buttons\">\n      <div class=\"vl\">\n      <button class=\"ai\" onMouseDown={listen} >인식 시작</button>\n      </div>\n      <div class=\"vl\">\n      <button class=\"ai\"  onMouseDown={() => {stopit()}} >인식 중지</button>\n      </div>\n      </div>\n      <button class=\"switch sw\">On / Off</button>\n      <button class=\"switch_off sw\">Off</button>\n      <div>{value}</div>\n      {listening && <div>음성인식 활성화 중</div>}\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}